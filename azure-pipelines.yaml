trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

variables:
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/tags/') }}:
    PKGVER: ${{ variables['Build.SourceBranchName'] }}
  ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/tags/')) }}:
    PKGVER: '0.0.0-dev'
  BuildConfiguration: Release

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macOS-latest'
    windows:
      imageName: 'windows-latest'

pool:
  vmImage: $(imageName)

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '6.0.x'
    includePreviewVersions: true

# - task: DotNetCoreCLI@2
#   displayName: 'Test'
#   inputs:
#     command: test
#     projects: tests/unit
#     arguments: '-c Release /p:AltCover=true /p:AltCoverCobertura=coverage.xml /p:AltCoverAssemblyFilter="(.*)(?<!Queil.Gmox.Core)$"'

# - task: PublishCodeCoverageResults@1
#   inputs:
#     summaryFileLocation: tests/unit/coverage.xml
#     codeCoverageTool: cobertura

- task: DotNetCoreCLI@2
  displayName: 'Pack'
  inputs:
    command: 'pack'
    packagesToPack: 'src/**/*.fsproj'
    versioningScheme: 'byEnvVar'
    versionEnvVar: PKGVER
    verbosityPack: 'Normal'
    buildProperties: "VersionPrefix=$PKGVER"
  condition: succeeded()

- task: PowerShell@2
  inputs:
    filePath: $(System.DefaultWorkingDirectory)/Run-Tests.ps1
    pwsh: true
  displayName: 'Test'
  condition: succeeded()

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: '$(System.DefaultWorkingDirectory)/testResults.xml'
    failTaskOnFailedTests: true

- bash: dotnet nuget push -s  https://api.nuget.org/v3/index.json -k $(nuget-api-key) $(Build.ArtifactStagingDirectory)/*.nupkg
  displayName: 'Push'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
