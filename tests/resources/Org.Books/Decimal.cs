// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: shared/decimal.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.Shared {

  /// <summary>Holder for reflection information generated from shared/decimal.proto</summary>
  public static partial class DecimalReflection {

    #region Descriptor
    /// <summary>File descriptor for shared/decimal.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DecimalReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRzaGFyZWQvZGVjaW1hbC5wcm90bxIKb3JnLnNoYXJlZCI1CgdEZWNpbWFs",
            "EgoKAmxvGAEgASgEEgoKAmhpGAIgASgNEhIKCnNpZ25fc2NhbGUYAyABKBFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Shared.Decimal), global::Org.Shared.Decimal.Parser, new[]{ "Lo", "Hi", "SignScale" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Decimal : pb::IMessage<Decimal> {
    private static readonly pb::MessageParser<Decimal> _parser = new pb::MessageParser<Decimal>(() => new Decimal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Decimal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Shared.DecimalReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal(Decimal other) : this() {
      lo_ = other.lo_;
      hi_ = other.hi_;
      signScale_ = other.signScale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal Clone() {
      return new Decimal(this);
    }

    /// <summary>Field number for the "lo" field.</summary>
    public const int LoFieldNumber = 1;
    private ulong lo_;
    /// <summary>
    /// the first 64 bits of the underlying value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Lo {
      get { return lo_; }
      set {
        lo_ = value;
      }
    }

    /// <summary>Field number for the "hi" field.</summary>
    public const int HiFieldNumber = 2;
    private uint hi_;
    /// <summary>
    /// the last 32 bis of the underlying value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hi {
      get { return hi_; }
      set {
        hi_ = value;
      }
    }

    /// <summary>Field number for the "sign_scale" field.</summary>
    public const int SignScaleFieldNumber = 3;
    private int signScale_;
    /// <summary>
    /// the number of decimal digits, and the sign
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignScale {
      get { return signScale_; }
      set {
        signScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Decimal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Decimal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lo != other.Lo) return false;
      if (Hi != other.Hi) return false;
      if (SignScale != other.SignScale) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lo != 0UL) hash ^= Lo.GetHashCode();
      if (Hi != 0) hash ^= Hi.GetHashCode();
      if (SignScale != 0) hash ^= SignScale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lo != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Lo);
      }
      if (Hi != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Hi);
      }
      if (SignScale != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(SignScale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Lo);
      }
      if (Hi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hi);
      }
      if (SignScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SignScale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Decimal other) {
      if (other == null) {
        return;
      }
      if (other.Lo != 0UL) {
        Lo = other.Lo;
      }
      if (other.Hi != 0) {
        Hi = other.Hi;
      }
      if (other.SignScale != 0) {
        SignScale = other.SignScale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Lo = input.ReadUInt64();
            break;
          }
          case 16: {
            Hi = input.ReadUInt32();
            break;
          }
          case 24: {
            SignScale = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
